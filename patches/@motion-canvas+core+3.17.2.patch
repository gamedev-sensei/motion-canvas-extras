diff --git a/node_modules/@motion-canvas/core/lib/app/bootstrap.js b/node_modules/@motion-canvas/core/lib/app/bootstrap.js
index 684a044..668ceb3 100644
--- a/node_modules/@motion-canvas/core/lib/app/bootstrap.js
+++ b/node_modules/@motion-canvas/core/lib/app/bootstrap.js
@@ -11,17 +11,50 @@ import { createSettingsMetadata } from './SettingsMetadata';
  * @param config - Project settings.
  * @param metaFile - The project meta file.
  * @param settingsFile - The settings meta file.
+ * @param pluginResolutions - Mapping from the plugin name to the plugin instance.
  * @param logger - An optional logger instance.
  *
  * @internal
  */
-export function bootstrap(name, versions, plugins, config, metaFile, settingsFile, logger = config.logger ?? new Logger()) {
+export function bootstrap(name, versions, plugins, config, metaFile, settingsFile, pluginResolutions = new Map(), logger = config.logger ?? new Logger()) {
     const settings = createSettingsMetadata();
     settingsFile.attach(settings);
+    function resolvePlugin(plugin) {
+        if (typeof plugin !== 'string')
+            return plugin;
+        const resolvedPlugin = pluginResolutions.get(plugin);
+        if (resolvedPlugin)
+            return resolvedPlugin;
+        return null
+        //throw new Error('Cannot load plugin by name outside editor');
+    }
+    function resolvePluginList(plugins) {
+        return plugins?.map(resolvePlugin)?.filter(p => p !== null) ?? [];
+    }
+    const allPlugins = [
+        DefaultPlugin(),
+        ...resolvePluginList(config.plugins),
+        ...resolvePluginList(config.scenes.flatMap(scene => scene.plugins ?? [])),
+        ...resolvePluginList(plugins),
+    ];
+    const pluginSet = new Set();
+    const includedPlugins = [];
+    let resolvedConfig = config;
+    for (const plugin of allPlugins) {
+        if (!plugin || pluginSet.has(plugin.name)) {
+            continue;
+        }
+        pluginSet.add(plugin.name);
+        includedPlugins.push(plugin);
+        resolvedConfig = {
+            ...resolvedConfig,
+            ...(plugin.settings?.(resolvedConfig) ?? {}),
+        };
+    }
     const project = {
         name,
         ...config,
-        plugins,
+        plugins: includedPlugins,
         versions,
         settings,
         logger,
@@ -30,6 +63,7 @@ export function bootstrap(name, versions, plugins, config, metaFile, settingsFil
     project.meta.shared.set(settings.defaults.get());
     project.experimentalFeatures ?? (project.experimentalFeatures = false);
     metaFile.attach(project.meta);
+    includedPlugins.forEach(plugin => plugin.project?.(project));
     return project;
 }
 /**
@@ -46,40 +80,26 @@ export function bootstrap(name, versions, plugins, config, metaFile, settingsFil
  */
 export async function editorBootstrap(name, versions, plugins, config, metaFile, settingsFile) {
     const logger = config.logger ?? new Logger();
-    const promises = [Promise.resolve(DefaultPlugin())];
-    if (config.plugins) {
-        for (const plugin of config.plugins) {
-            promises.push(parsePlugin(plugin, logger));
-        }
+    const pluginResolutions = new Map();
+    async function resolvePlugin(plugin) {
+        if (typeof plugin !== 'string')
+            return;
+        const parsedPlugin = await parsePlugin(plugin, logger);
+        if (!parsedPlugin)
+            return;
+        pluginResolutions.set(plugin, parsedPlugin);
     }
-    for (const scene of config.scenes) {
-        if (scene.plugins) {
-            for (const plugin of scene.plugins) {
-                promises.push(parsePlugin(plugin, logger));
-            }
-        }
-    }
-    for (const plugin of plugins) {
-        promises.push(parsePlugin(plugin, logger));
+    async function resolvePluginList(plugins) {
+        if (!plugins)
+            return;
+        await Promise.all(plugins.map(resolvePlugin));
     }
-    const pluginSet = new Set();
-    const resolvedPlugins = await Promise.all(promises);
-    const includedPlugins = [];
-    let resolvedConfig = config;
-    for (const plugin of resolvedPlugins) {
-        if (!plugin || pluginSet.has(plugin.name)) {
-            continue;
-        }
-        pluginSet.add(plugin.name);
-        includedPlugins.push(plugin);
-        resolvedConfig = {
-            ...resolvedConfig,
-            ...(plugin.settings?.(resolvedConfig) ?? {}),
-        };
-    }
-    const project = bootstrap(name, versions, includedPlugins, resolvedConfig, metaFile, settingsFile);
-    includedPlugins.forEach(plugin => plugin.project?.(project));
-    return project;
+    await Promise.all([
+        resolvePluginList(config.plugins),
+        resolvePluginList(config.scenes.flatMap(scene => scene.plugins ?? [])),
+        resolvePluginList(plugins),
+    ]);
+    return bootstrap(name, versions, plugins, config, metaFile, settingsFile, pluginResolutions, logger);
 }
 async function parsePlugin(plugin, logger) {
     if (typeof plugin === 'string') {
@@ -103,4 +123,4 @@ async function parsePlugin(plugin, logger) {
     }
     return plugin;
 }
-//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcC9ib290c3RyYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxhQUFhLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUVoQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFMUQ7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FDdkIsSUFBWSxFQUNaLFFBQWtCLEVBQ2xCLE9BQWlCLEVBQ2pCLE1BQXVCLEVBQ3ZCLFFBQXVCLEVBQ3ZCLFlBQTJCLEVBQzNCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksTUFBTSxFQUFFO0lBRXRDLE1BQU0sUUFBUSxHQUFHLHNCQUFzQixFQUFFLENBQUM7SUFDMUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUU5QixNQUFNLE9BQU8sR0FBRztRQUNkLElBQUk7UUFDSixHQUFHLE1BQU07UUFDVCxPQUFPO1FBQ1AsUUFBUTtRQUNSLFFBQVE7UUFDUixNQUFNO0tBQ0ksQ0FBQztJQUViLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNqRCxPQUFPLENBQUMsb0JBQW9CLEtBQTVCLE9BQU8sQ0FBQyxvQkFBb0IsR0FBSyxLQUFLLEVBQUM7SUFDdkMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFOUIsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVEOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxlQUFlLENBQ25DLElBQVksRUFDWixRQUFrQixFQUNsQixPQUE0QixFQUM1QixNQUF1QixFQUN2QixRQUF1QixFQUN2QixZQUEyQjtJQUUzQixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksTUFBTSxFQUFFLENBQUM7SUFDN0MsTUFBTSxRQUFRLEdBQTZCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFOUUsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO1FBQ2xCLEtBQUssTUFBTSxNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUNuQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUM1QztLQUNGO0lBRUQsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ2pDLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNqQixLQUFLLE1BQU0sTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBQ2xDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO2FBQzVDO1NBQ0Y7S0FDRjtJQUVELEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzVCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0tBQzVDO0lBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztJQUNwQyxNQUFNLGVBQWUsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEQsTUFBTSxlQUFlLEdBQWEsRUFBRSxDQUFDO0lBQ3JDLElBQUksY0FBYyxHQUFHLE1BQU0sQ0FBQztJQUU1QixLQUFLLE1BQU0sTUFBTSxJQUFJLGVBQWUsRUFBRTtRQUNwQyxJQUFJLENBQUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pDLFNBQVM7U0FDVjtRQUVELFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFN0IsY0FBYyxHQUFHO1lBQ2YsR0FBRyxjQUFjO1lBQ2pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzdDLENBQUM7S0FDSDtJQUVELE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FDdkIsSUFBSSxFQUNKLFFBQVEsRUFDUixlQUFlLEVBQ2YsY0FBYyxFQUNkLFFBQVEsRUFDUixZQUFZLENBQ2IsQ0FBQztJQUVGLGVBQWUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUU3RCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQsS0FBSyxVQUFVLFdBQVcsQ0FDeEIsTUFBdUIsRUFDdkIsTUFBYztJQUVkLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO1FBQzlCLElBQUk7WUFDRixJQUFJLEdBQUcsR0FBRyxRQUFRLE1BQU0sRUFBRSxDQUFDO1lBQzNCLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvRCxJQUFJLE9BQU8sRUFBRTtnQkFDWCxHQUFHLElBQUksTUFBTSxPQUFPLEVBQUUsQ0FBQzthQUN4QjtZQUNELE1BQU0sR0FBRyxDQUFDLE1BQU0sTUFBTSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFZLENBQUM7U0FDckU7UUFBQyxPQUFPLENBQU0sRUFBRTtZQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDWCxPQUFPLEVBQUUsMEJBQTBCLE1BQU0sTUFBTSxDQUFDLENBQUMsT0FBTyxHQUFHO2dCQUMzRCxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUs7Z0JBQ2QsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPO2FBQ25CLENBQUMsQ0FBQztZQUNILE9BQU8sSUFBSSxDQUFDO1NBQ2I7S0FDRjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMifQ==
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcC9ib290c3RyYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxhQUFhLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUVoQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFMUQ7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNILE1BQU0sVUFBVSxTQUFTLENBQ3ZCLElBQVksRUFDWixRQUFrQixFQUNsQixPQUE0QixFQUM1QixNQUF1QixFQUN2QixRQUF1QixFQUN2QixZQUEyQixFQUMzQixvQkFBeUMsSUFBSSxHQUFHLEVBQWtCLEVBQ2xFLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksTUFBTSxFQUFFO0lBRXRDLE1BQU0sUUFBUSxHQUFHLHNCQUFzQixFQUFFLENBQUM7SUFDMUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUU5QixTQUFTLGFBQWEsQ0FBQyxNQUF1QjtRQUM1QyxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVE7WUFBRSxPQUFPLE1BQU0sQ0FBQztRQUU5QyxNQUFNLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckQsSUFBSSxjQUFjO1lBQUUsT0FBTyxjQUFjLENBQUM7UUFFMUMsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxTQUFTLGlCQUFpQixDQUN4QixPQUF3QztRQUV4QyxPQUFPLE9BQU8sRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFFRCxNQUFNLFVBQVUsR0FBYTtRQUMzQixhQUFh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
\ No newline at end of file
